name: azureautomationdeployments
on:
  workflow_dispatch:
  ## events used later for logic that selets to deploy to QA, Prod targets
  release:
    types: [published, unpublished]
  ## events used later for logic that selets to deploy to PoC, Dev destinations
  push:
    branches-ignore:
      - 'NoTrigger**'

defaults:
  run:
    shell: pwsh

jobs:
  DoTheDo:
    name: Checkout, then do something useful
    ## dynamically determine which GitHub Deployment Environment to use for this entire job
    environment:
      name: ${{ github.event_name == 'release' && ( github.release_type == 'released' && 'prod' || 'qa' ) || (github.ref == 'main' && 'dev' || 'poc') }}

    runs-on: ubuntu-latest

    steps:
      - name: Check it out!
        uses: actions/checkout@v4

      - name: do the do!
        run: |
          & (Join-Path -Path ${env:GITHUB_WORKSPACE} -ChildPath Update-MyCoolThings.ps1)

      - name: Connect to Azure for the AZ subscription specified by secrets/vars for _this_ GitHub Deployment Environment
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: do the idempotent do!
        run: |
          ## Get the Current Configurations Files from Azure
          New-Item -Type Directory -Name "Temp"
          $outputFolder = (Join-Path -Path ${env:GITHUB_WORKSPACE} -Childpath "Temp")
          Get-azautomationdscconfiguration -ResourceGroupName '${{ env.RESOURCE_GROUP_NAME }}' -AutomationAccountName '${{ env.AUTOMATION_ACCOUNT_NAME }}'  | Foreach-Object{
           Export-AzAutomationDscConfiguration -ResourceGroupName '${{ env.RESOURCE_GROUP_NAME }}' -AutomationAccountName '${{ env.AUTOMATION_ACCOUNT_NAME }}'  -Name $_.Name -OutputFolder $outputFolder }

          Get-ChildItem -File -Path (Join-Path -Path $outputFolder -ChildPath ".ps1") | Foreach-Object {
            ## do the idempotent thing
            
            if ((($_.FullName, (Get-AzCompiledThingy -Name $someThingy) | Get-FileHash | Group-Object -Property Filehash | Measure-Object).Count -gt 1))) {Start-AzCompileThingy -SourcePath $_.Fullname -Target}
          }