name: doCoolStuffs
on:
  workflow_dispatch:
  ## events used later for logic that selets to deploy to QA, Prod targets
  release:
    types: [released, drafted]
  ## events used later for logic that selets to deploy to PoC, Dev destinations
  push:
    branches-ignore:
      - 'NoTrigger**'

defaults:
  run:
    shell: pwsh

jobs:
  DoTheDo:
    name: Checkout, then do something useful
    ## dynamically determine which GitHub Deployment Environment to use for this entire job
    environment:
      name: ${{
        ## for GH Release creations/publishings
        github.event_name == 'release' && (
          ## if "published" GHRelease, use the 'prod' GH Deployment Env
          github.release_type == 'released' && 'prod' ||
          ## else, it was a draft release; use the 'qa' GH Deployment Env
          'qa'
        ) ||
        (
          ## if commit was to `main` (as is the case upon successful PR merge)
          github.ref == 'main' && 'dev' ||
          ## else, deploy to poc GH Deploy env
          'poc'
      }}
    runs-on: ubuntu-latest

    steps:
      - name: Check it out!
        uses: actions/checkout@v4

      - name: do the do!
        run: |
          ## run this sweet PS1 as it is _in the git branch that triggered this GHA workflow execution_
          & (Join-Path -Path ${env:GITHUB_WORKSPACE} -ChildPath Update-MyCoolThings.ps1)

      - name: Connect to Azure for the AZ subscription specified by secrets/vars for _this_ GitHub Deployment Environment
        uses: actions/az-login
        with:
          ## then, this workflow uses the GH Deployment Environment's secrets / vars as params; single workflow definition, essentially 'parameterized' using GH Deployment Environment secrets/vars
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: do the idempotent do!
        run: |
          Get-ChildItem ${{ vars.RelPathToImportantFilesToEnsure }} | Foreach-Object {
            ## do the idempotent thing
            if ((($_.FullName, (Get-AzCompiledThingy -Name $someThingy) | Get-FileHash | Group-Object -Property Filehash | Measure-Object).Count -gt 1))) {Start-AzCompileThingy -SourcePath $_.Fullname -Target}
          }