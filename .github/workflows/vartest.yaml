name: Azure Automation Upload and Compile
on:
  workflow_dispatch:
  ## events used later for logic that selets to deploy to QA, Prod targets
  release:
    types: [prereleased, released]
  ## events used later for logic that selets to deploy to PoC, Dev destinations
  push:
    branches-ignore:
      - 'NoTrigger**'
    paths:
      - 'dcMonitor/*.ps1'
      - 'dcManufacturing/*.ps1'

permissions:
  id-token: write
  contents: write

defaults:
  run:
    shell: pwsh

jobs:
  DoTheDo:
    name: Checkout the Repo
    environment:
      ## name: ${{ github.event_name == 'release' && ( github.event.release.prerelease == true && 'QA' || 'Prod' ) || (github.ref_name == 'main' && 'Dev' || 'poc') }}
      name: 'poc'

    runs-on: ubuntu-latest

    steps:
      - name: Check it out!
        uses: actions/checkout@v4

      - name: Connect to Azure for the AZ subscription specified by secrets/vars for _this_ GitHub Deployment Environment
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true

      - name: Upload and Compile Changed DSC Code
        uses: azure/powershell@v2
        with:
          azPSVersion: "latest"
          inlineScript: |
           $dirSeparator = [IO.Path]::DirectorySeparatorChar
           New-Item -Type Directory -Name "temp" -Path $env:GITHUB_WORKSPACE
           $tempDSCFilePath = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath ("temp" + $dirSeparator)
           
           $automationAccounts = @'
            ${{ vars.AZURE_AUTOMATION_ACCOUNTS }}
           '@ | ConvertFrom-Json
           
           $repoDSCFileLocation = $automationAccounts.gitHubRepoFolder | ForEach-Object {Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath ("$_" + $dirSeparator + "*.ps1")}

           # Download both Standard and Manufacturing Configurations to a temp folder on the Runner and remove the idiotic \ character that the Azure export cmdlet adds
           $automationAccounts | Where-Object{$true} -pipelinevariable automationInfo | ForEach-Object {get-azautomationdscconfiguration -ResourceGroupName $_.AutomationAccountResourceGroup  -AutomationAccountName $_.AutomationAccountName | ForEach-Object{export-AzAutomationDscConfiguration -ResourceGroupName $automationInfo.AutomationAccountResourceGroup -AutomationAccountName $automationInfo.AutomationAccountName -Name $_.Name -OutputFolder $tempDSCFilePath -Force}}
           Get-ChildItem -path $tempDSCFilePath -File | Select-Object -expand FullName | ForEach-Object{mv $_ ($_.Replace("\",""))}

           # Get the hash of files in the Repo and in Azure and compare to see if files in the Repo are different
           $deployedFiles = Get-ChildItem -path $tempDSCFilePath -File | select-object -Property Name,FullName,DirectoryName,@{n="FileHash";e={Get-Filehash $_ | Select-Object -expand Hash}}
           $repobasedFiles = Get-ChildItem -path $repoDSCFileLocation -File -PipelineVariable repoFile | select-object -Property Name,FullName,DirectoryName,BaseName,@{n="FileHash";e={Get-Filehash $_ | Select-Object -expand Hash}},@{n="AutomationAccountName";e={($automationAccounts | ?{$_.gitHubRepoFolder -eq ($repoFile.BaseName)}).AutomationAccountName}},@{n="ResourceGroup";e={($automationAccounts | ?{$_.gitHubRepoFolder -eq ($repoFile.BaseName)}).AutomationAccountResourceGroup}} 

           # Compare the Repo-based files to the AzureAutomation-based files, report only Repo-based files that are different.
           $compareResults = (Compare-Object -ReferenceObject $repobasedFiles -DifferenceObject $DeployedFiles -Property FileHash -PassThru | Where-Object{$_.SideIndicator -eq "<="})
           
           If($null -ne $compareResults){
            $compareResults | ForEach-Object{
              $updatedFilePath = (Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "$($_.BaseName)$dirSeparator$($_.Name)")
              $UpdatedConfigName = ($_.Name.Split($dirSeparator)[-1].replace(".ps1",""))
              Import-AzAutomationDscConfiguration -AutomationAccountName $_.AutomationAccountName -Published -ResourceGroupName $_.ResourceGroup -SourcePath $updatedFilePath -Force
              Start-AzAutomationDscCompilationJob -ConfigurationName $UpdatedConfigName -ResourceGroupName $_.ResourceGroup -AutomationAccountName $_.AutomationAccountName
            }
           }